// boundary case
    // HalfEdge *begin = Vertices[0]->edge;
    // std::cout << "Id of the HE  : " << begin->id << std::endl;
    // HalfEdge *t = begin;
    // bool boundary_flag = false;
    // do
    // {
    //     std::cout << t->face->id << "\n";
    //     // order of these next two statement, matters
    //     if (t->boundary)
    //     {
    //         boundary_flag = true;
    //         break;
    //     }
    //     t = t->pairHalfEdge->nextHalfEdge;

    // } while (t != begin);
    // if (boundary_flag)
    // {
    //     std::cout << "Boundary detected";
    // }






//face
    HalfEdge *begin = Faces[0]->start_edge;
    std::cout << "Id of the HE  : " << begin->id << std::endl;
    HalfEdge *t = begin;
    bool boundary_flag = false;
    do
    {
        // std::cout << t->face->id << "\n";
        std::cout << t->vertex->id << " ";
        t = t->nextHalfEdge;

    } while (t != begin);

//all connections tested
HalfEdge *begin = Faces[5]->start_edge;
    std::cout << "Face[0] id : " << Faces[5]->id << std::endl;
    HalfEdge *t = begin;
    std::cout << t->id << std::endl;
    std::cout << t->nextHalfEdge->id << std::endl;
    std::cout << t->nextHalfEdge->nextHalfEdge->id << std::endl;
    std::cout << t->nextHalfEdge->nextHalfEdge->nextHalfEdge->id << std::endl; // shouldbe same as t -> id
    std::cout << "------\n";
    std::cout << t->id << std::endl;
    std::cout << t->prevHalfEdge->id << std::endl;
    std::cout << t->prevHalfEdge->prevHalfEdge->id << std::endl;
    std::cout << t->prevHalfEdge->prevHalfEdge->prevHalfEdge->id << std::endl; // shouldbe same as t -> id
    std::cout << "------\n";
    std::cout << glm::to_string(t->vertex->position) << std::endl;
    std::cout << glm::to_string(t->nextHalfEdge->vertex->position) << std::endl;
    std::cout << glm::to_string(t->nextHalfEdge->nextHalfEdge->vertex->position) << std::endl;
    std::cout << glm::to_string(t->nextHalfEdge->nextHalfEdge->nextHalfEdge->vertex->position) << std::endl; // shouldbe same as t -> id
    std::cout << "------\n";
    std::cout << glm::to_string(t->vertex->position) << std::endl;
    std::cout << glm::to_string(t->prevHalfEdge->vertex->position) << std::endl;
    std::cout << glm::to_string(t->prevHalfEdge->prevHalfEdge->vertex->position) << std::endl;
    std::cout << glm::to_string(t->prevHalfEdge->prevHalfEdge->prevHalfEdge->vertex->position) << std::endl; // shouldbe same as t -> id
    std::cout << "id Opposite to he 6 : " << t->nextHalfEdge->nextHalfEdge->pairHalfEdge->id << "\n";
 